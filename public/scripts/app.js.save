(function() {

	'use strict';

	angular
		.module('authApp', [
			'ui.router',
		    'ngSanitize', 
    		'satellizer',
		    'angularUtils.directives.dirPagination',
		    'com.2fdevs.videogular',
		    'com.2fdevs.videogular.plugins.controls',
		    'com.2fdevs.videogular.plugins.overlayplay',
		    'com.2fdevs.videogular.plugins.buffering',
		    'com.2fdevs.videogular.plugins.poster',
            "com.2fdevs.videogular.plugins.dash"
		])
		.config(function($stateProvider, $urlRouterProvider, $authProvider,  $httpProvider, $provide) {
			
			function redirectWhenLoggedOut($q, $injector) {

				return {

					responseError: function(rejection) {

						// Need to use $injector.get to bring in $state or else we get
						// a circular dependency error
						var $state = $injector.get('$state');

						// Instead of checking for a status code of 400 which might be used
						// for other reasons in Laravel, we check for the specific rejection
						// reasons to tell us if we need to redirect to the login state
						var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];

						// Loop through each rejection reason and redirect to the login
						// state if one is encountered
						angular.forEach(rejectionReasons, function(value, key) {

							if(rejection.data.error === value) {
								
								// If we get a rejection corresponding to one of the reasons
								// in our array, we know we need to authenticate the user so 
								// we can remove the current user from local storage
								localStorage.removeItem('user');

								// Send the user to the auth state so they can login
								$state.go('auth');
							}
						});

						return $q.reject(rejection);
					}
				}
			}

			// Setup for the $httpInterceptor
			$provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);

			// Push the new factory onto the $http interceptor array
			$httpProvider.interceptors.push('redirectWhenLoggedOut');

			$authProvider.loginUrl = '/api/authenticate';

			$urlRouterProvider.otherwise('/auth');
			
			$stateProvider
				.state('auth', {
					url: '/auth',
					templateUrl: '../views/authView.html',
					controller: 'AuthController as auth'
				})
				.state('register', {
                    url: '/register',
                    templateUrl: '../views/registerView.html',
                    controller: 'RegisterController as reg'
                })
				.state('users', {
					url: '/users',
					templateUrl: '../views/userView.html',
					controller: 'UserController as user'
				})
				.state('users.detail', {
					url: "/{usersId:[0-9]{1,4}}",
					templateUrl: '../views/user-detail.html',
					controller: 'UserController as user'
				})
				.state('testing', {
					url: '/testing',
					templateUrl: '../views/socketView.html'
				})				
				.state('live', {
					url: '/live',
					templateUrl: '../views/liveView.html',
					controller: 'AllLiveListCtrl'
				})
                .state('dashVideos', {
                        url: '/dashVideos',
                        templateUrl: '../templates/dashVideosView.html',
                        controller: 'ItemController'
                })
				.state('live.detail', {
					url: "/{liveId:[0-9]{1,4}}",
					templateUrl: '../views/live-detail.html',
					controller: 'LiveDetailCtrl as controller',
					resolve: {
		                videoData: ["$stateParams", "VideoProvider", function loadVideoData($stateParams, VideoProvider) {
		                    var videoId = $stateParams.id;
		                    var url = 'data/live.json';
		                    return VideoProvider.loadVideo(url);
		                }]
		            }
				})
				
                                .state('videos', {
                                // With abstract set to true, that means this state can not be explicitly activated.
                                // It can only be implicitly activated by activating one of its children.
                                abstract: true,
				
                                // This abstract state will prepend '/contacts' onto the urls of all its children.
                                	url: '/videos',

					templateUrl: '../views/videosView.html',
					controller: 'AllVideosListCtrl'
				})
				.state('videos.detail', {
					url: "/{videoId:[0-9]{1,4}}",
					templateUrl: '../views/video-detail.html',
					controller: 'VideoDetailCtrl as controller',
					resolve: {
		                videoData: ["$stateParams", "VideoProvider", function loadVideoData($stateParams, VideoProvider) {
		                    var videoId = $stateParams.id;
		                    var url = 'http://ec2-52-42-36-255.us-west-2.compute.amazonaws.com/api/videos';
		                    return VideoProvider.loadVideo(url);
		                }]
		            }
				})
			})
		.run(function($rootScope, $state) {

			// $stateChangeStart is fired whenever the state changes. We can use some parameters
			// such as toState to hook into details about the state as it is changing
			$rootScope.$on('$stateChangeStart', function(event, toState) {

				// Grab the user from local storage and parse it to an object
				var user = JSON.parse(localStorage.getItem('user'));			

				// If there is any user data in local storage then the user is quite
				// likely authenticated. If their token is expired, or if they are
				// otherwise not actually authenticated, they will be redirected to
				// the auth state because of the rejected request anyway
				if(user) {

					// The user's authenticated state gets flipped to
					// true so we can now show parts of the UI that rely
					// on the user being logged in
					$rootScope.authenticated = true;

					// Putting the user's data on $rootScope allows
					// us to access it anywhere across the app. Here
					// we are grabbing what is in local storage
					$rootScope.currentUser = user;

					// If the user is logged in and we hit the auth route we don't need
					// to stay there and can send the user to the main state
					if(toState.name === "auth") {

						// Preventing the default behavior allows us to use $state.go
						// to change states
						event.preventDefault();

						// go to the "main" state which in our case is users
						$state.go('users');
					}		
				}
			});
		});
})();
